apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'osgi'

group = 'com.fazecast'
archivesBaseName = 'jSerialComm'
version = '2.2.0'
ext.moduleName = 'com.fazecast.jSerialComm'

ext.java8Home='/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home'
ext.java9Home='/Library/Java/JavaVirtualMachines/jdk-9.0.4.jdk/Contents/Home'

assert hasProperty('java8Home'): "Set the property 'java8Home' in your gradle.properties file pointing to a Java 8 JDK installation"
assert hasProperty('java9Home'): "Set the property 'java9Home' in your gradle.properties file pointing to a Java 9 JDK installation"

sourceCompatibility = 1.8
targetCompatibility = 1.8
javadoc.options.links("https://docs.oracle.com/javase/9/docs/api/")
javadoc.options.addBooleanOption('html4', true)

def java8ExecutablesPath = new File(java8Home, 'bin')
def java9ExecutablesPath = new File(java9Home, 'bin')
def java8Executables = [:].withDefault { execName ->
  def executable = new File(java8ExecutablesPath, execName)
  executable
}
def java9Executables = [:].withDefault { execName ->
  def executable = new File(java9ExecutablesPath, execName)
  executable
}

tasks.withType(JavaCompile) {
  options.with {
    fork = true
    forkOptions.javaHome = file(java8Home)
  }
}
tasks.withType(Javadoc) {
  executable = java9Executables.javadoc
}
tasks.withType(Test) {
  executable = java8Executables.java
}
tasks.withType(JavaExec) {
  executable = java8Executables.java
}

sourceSets {
  main {
    java {
      srcDirs = ['src/main/java']
    }
  }
  moduleInfo {
    java {
      srcDirs = ['src/moduleInfo/java']
    }
  }
}

compileModuleInfoJava {
  sourceCompatibility = 9
  targetCompatibility = 9
  inputs.property("moduleName", moduleName)

  doFirst {
    classpath = files()
    options.fork = true
    options.forkOptions.javaHome = file(java9Home)
    options.sourcepath = files(sourceSets.moduleInfo.java.srcDirs)
    options.compilerArgs = [
            '--module-path', classpath.asPath,
            '-d', sourceSets.main.output.classesDirs.asPath
    ]
  }
}

jar {
  from sourceSets.main.output
  from sourceSets.moduleInfo.output

  manifest {
    instruction 'Bundle-Description', 'Java Serial Communications Library'
    instruction 'Bundle-Vendor', 'Fazecast, Inc.'
    instruction 'Require-Capability', 'osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=1.8))"'
    attributes 'Implementation-Title': 'jSerialComm: Java Serial Communications Library',
            'Implementation-Version': version,
            'Implementation-Vendor': 'Fazecast, Inc.',
            'Sealed': 'true'
  }
}

task testJar(type: Jar) {
  classifier = 'test'
  from sourceSets.test.output, sourceSets.main.output

  manifest {
    attributes 'Main-Class': 'com.fazecast.jSerialComm.SerialPortTest',
            'Implementation-Title': 'jSerialComm: Java Serial Communications Library',
            'Implementation-Version': version,
            'Implementation-Vendor': 'Fazecast, Inc.',
            'Sealed': 'true'
  }
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives jar, javadocJar, sourcesJar, testJar
}